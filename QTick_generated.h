// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_QTICK_H_
#define FLATBUFFERS_GENERATED_QTICK_H_

#include "flatbuffers/flatbuffers.h"

struct QTick;
struct QTickBuilder;

struct QTick FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef QTickBuilder Builder;
  enum {
    VT_SRC = 4,
    VT_DTYPE = 6,
    VT_TIMESTAMP = 8,
    VT_CODE = 10,
    VT_NAME = 12,
    VT_MARKET = 14,
    VT_PRE_CLOSE = 16,
    VT_UPPER_LIMIT = 18,
    VT_LOWER_LIMIT = 20,
    VT_BP = 22,
    VT_BV = 24,
    VT_AP = 26,
    VT_AV = 28,
    VT_STATUS = 30,
    VT_NEW_PRICE = 32,
    VT_NEW_VOLUME = 34,
    VT_NEW_AMOUNT = 36,
    VT_SUM_VOLUME = 38,
    VT_SUM_AMOUNT = 40,
    VT_OPEN = 42,
    VT_HIGH = 44,
    VT_LOW = 46,
    VT_AVG_BID_PRICE = 48,
    VT_AVG_ASK_PRICE = 50,
    VT_NEW_BID_VOLUME = 52,
    VT_NEW_BID_AMOUNT = 54,
    VT_NEW_ASK_VOLUME = 56,
    VT_NEW_ASK_AMOUNT = 58,
    VT_OPEN_INTEREST = 60,
    VT_PRE_SETTLE = 62,
    VT_PRE_OPEN_INTEREST = 64,
    VT_CLOSE = 66,
    VT_SETTLE = 68,
    VT_MULTIPLE = 70,
    VT_PRICE_STEP = 72,
    VT_CREATE_DATE = 74,
    VT_LIST_DATE = 76,
    VT_EXPIRE_DATE = 78,
    VT_START_SETTLE_DATE = 80,
    VT_END_SETTLE_DATE = 82,
    VT_EXERCISE_DATE = 84,
    VT_EXERCISE_PRICE = 86,
    VT_CP_FLAG = 88,
    VT_UNDERLYING_CODE = 90,
    VT_SUM_BID_VOLUME = 92,
    VT_SUM_BID_AMOUNT = 94,
    VT_SUM_ASK_VOLUME = 96,
    VT_SUM_ASK_AMOUNT = 98,
    VT_BID_ORDER_VOLUME = 100,
    VT_BID_ORDER_AMOUNT = 102,
    VT_BID_CANCEL_VOLUME = 104,
    VT_BID_CANCEL_AMOUNT = 106,
    VT_ASK_ORDER_VOLUME = 108,
    VT_ASK_ORDER_AMOUNT = 110,
    VT_ASK_CANCEL_VOLUME = 112,
    VT_ASK_CANCEL_AMOUNT = 114,
    VT_NEW_KNOCK_COUNT = 116,
    VT_SUM_KNOCK_COUNT = 118
  };
  int8_t src() const {
    return GetField<int8_t>(VT_SRC, 0);
  }
  int8_t dtype() const {
    return GetField<int8_t>(VT_DTYPE, 0);
  }
  int64_t timestamp() const {
    return GetField<int64_t>(VT_TIMESTAMP, 0);
  }
  const flatbuffers::String *code() const {
    return GetPointer<const flatbuffers::String *>(VT_CODE);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int8_t market() const {
    return GetField<int8_t>(VT_MARKET, 0);
  }
  double pre_close() const {
    return GetField<double>(VT_PRE_CLOSE, 0.0);
  }
  double upper_limit() const {
    return GetField<double>(VT_UPPER_LIMIT, 0.0);
  }
  double lower_limit() const {
    return GetField<double>(VT_LOWER_LIMIT, 0.0);
  }
  const flatbuffers::Vector<double> *bp() const {
    return GetPointer<const flatbuffers::Vector<double> *>(VT_BP);
  }
  const flatbuffers::Vector<int64_t> *bv() const {
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_BV);
  }
  const flatbuffers::Vector<double> *ap() const {
    return GetPointer<const flatbuffers::Vector<double> *>(VT_AP);
  }
  const flatbuffers::Vector<int64_t> *av() const {
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_AV);
  }
  int8_t status() const {
    return GetField<int8_t>(VT_STATUS, 0);
  }
  double new_price() const {
    return GetField<double>(VT_NEW_PRICE, 0.0);
  }
  int64_t new_volume() const {
    return GetField<int64_t>(VT_NEW_VOLUME, 0);
  }
  double new_amount() const {
    return GetField<double>(VT_NEW_AMOUNT, 0.0);
  }
  int64_t sum_volume() const {
    return GetField<int64_t>(VT_SUM_VOLUME, 0);
  }
  double sum_amount() const {
    return GetField<double>(VT_SUM_AMOUNT, 0.0);
  }
  double open() const {
    return GetField<double>(VT_OPEN, 0.0);
  }
  double high() const {
    return GetField<double>(VT_HIGH, 0.0);
  }
  double low() const {
    return GetField<double>(VT_LOW, 0.0);
  }
  double avg_bid_price() const {
    return GetField<double>(VT_AVG_BID_PRICE, 0.0);
  }
  double avg_ask_price() const {
    return GetField<double>(VT_AVG_ASK_PRICE, 0.0);
  }
  int64_t new_bid_volume() const {
    return GetField<int64_t>(VT_NEW_BID_VOLUME, 0);
  }
  double new_bid_amount() const {
    return GetField<double>(VT_NEW_BID_AMOUNT, 0.0);
  }
  int64_t new_ask_volume() const {
    return GetField<int64_t>(VT_NEW_ASK_VOLUME, 0);
  }
  double new_ask_amount() const {
    return GetField<double>(VT_NEW_ASK_AMOUNT, 0.0);
  }
  int64_t open_interest() const {
    return GetField<int64_t>(VT_OPEN_INTEREST, 0);
  }
  double pre_settle() const {
    return GetField<double>(VT_PRE_SETTLE, 0.0);
  }
  int64_t pre_open_interest() const {
    return GetField<int64_t>(VT_PRE_OPEN_INTEREST, 0);
  }
  double close() const {
    return GetField<double>(VT_CLOSE, 0.0);
  }
  double settle() const {
    return GetField<double>(VT_SETTLE, 0.0);
  }
  int64_t multiple() const {
    return GetField<int64_t>(VT_MULTIPLE, 0);
  }
  double price_step() const {
    return GetField<double>(VT_PRICE_STEP, 0.0);
  }
  int32_t create_date() const {
    return GetField<int32_t>(VT_CREATE_DATE, 0);
  }
  int32_t list_date() const {
    return GetField<int32_t>(VT_LIST_DATE, 0);
  }
  int32_t expire_date() const {
    return GetField<int32_t>(VT_EXPIRE_DATE, 0);
  }
  int32_t start_settle_date() const {
    return GetField<int32_t>(VT_START_SETTLE_DATE, 0);
  }
  int32_t end_settle_date() const {
    return GetField<int32_t>(VT_END_SETTLE_DATE, 0);
  }
  int32_t exercise_date() const {
    return GetField<int32_t>(VT_EXERCISE_DATE, 0);
  }
  double exercise_price() const {
    return GetField<double>(VT_EXERCISE_PRICE, 0.0);
  }
  int8_t cp_flag() const {
    return GetField<int8_t>(VT_CP_FLAG, 0);
  }
  const flatbuffers::String *underlying_code() const {
    return GetPointer<const flatbuffers::String *>(VT_UNDERLYING_CODE);
  }
  int64_t sum_bid_volume() const {
    return GetField<int64_t>(VT_SUM_BID_VOLUME, 0);
  }
  double sum_bid_amount() const {
    return GetField<double>(VT_SUM_BID_AMOUNT, 0.0);
  }
  int64_t sum_ask_volume() const {
    return GetField<int64_t>(VT_SUM_ASK_VOLUME, 0);
  }
  double sum_ask_amount() const {
    return GetField<double>(VT_SUM_ASK_AMOUNT, 0.0);
  }
  int64_t bid_order_volume() const {
    return GetField<int64_t>(VT_BID_ORDER_VOLUME, 0);
  }
  double bid_order_amount() const {
    return GetField<double>(VT_BID_ORDER_AMOUNT, 0.0);
  }
  int64_t bid_cancel_volume() const {
    return GetField<int64_t>(VT_BID_CANCEL_VOLUME, 0);
  }
  double bid_cancel_amount() const {
    return GetField<double>(VT_BID_CANCEL_AMOUNT, 0.0);
  }
  int64_t ask_order_volume() const {
    return GetField<int64_t>(VT_ASK_ORDER_VOLUME, 0);
  }
  double ask_order_amount() const {
    return GetField<double>(VT_ASK_ORDER_AMOUNT, 0.0);
  }
  int64_t ask_cancel_volume() const {
    return GetField<int64_t>(VT_ASK_CANCEL_VOLUME, 0);
  }
  double ask_cancel_amount() const {
    return GetField<double>(VT_ASK_CANCEL_AMOUNT, 0.0);
  }
  int64_t new_knock_count() const {
    return GetField<int64_t>(VT_NEW_KNOCK_COUNT, 0);
  }
  int64_t sum_knock_count() const {
    return GetField<int64_t>(VT_SUM_KNOCK_COUNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_SRC) &&
           VerifyField<int8_t>(verifier, VT_DTYPE) &&
           VerifyField<int64_t>(verifier, VT_TIMESTAMP) &&
           VerifyOffset(verifier, VT_CODE) &&
           verifier.VerifyString(code()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int8_t>(verifier, VT_MARKET) &&
           VerifyField<double>(verifier, VT_PRE_CLOSE) &&
           VerifyField<double>(verifier, VT_UPPER_LIMIT) &&
           VerifyField<double>(verifier, VT_LOWER_LIMIT) &&
           VerifyOffset(verifier, VT_BP) &&
           verifier.VerifyVector(bp()) &&
           VerifyOffset(verifier, VT_BV) &&
           verifier.VerifyVector(bv()) &&
           VerifyOffset(verifier, VT_AP) &&
           verifier.VerifyVector(ap()) &&
           VerifyOffset(verifier, VT_AV) &&
           verifier.VerifyVector(av()) &&
           VerifyField<int8_t>(verifier, VT_STATUS) &&
           VerifyField<double>(verifier, VT_NEW_PRICE) &&
           VerifyField<int64_t>(verifier, VT_NEW_VOLUME) &&
           VerifyField<double>(verifier, VT_NEW_AMOUNT) &&
           VerifyField<int64_t>(verifier, VT_SUM_VOLUME) &&
           VerifyField<double>(verifier, VT_SUM_AMOUNT) &&
           VerifyField<double>(verifier, VT_OPEN) &&
           VerifyField<double>(verifier, VT_HIGH) &&
           VerifyField<double>(verifier, VT_LOW) &&
           VerifyField<double>(verifier, VT_AVG_BID_PRICE) &&
           VerifyField<double>(verifier, VT_AVG_ASK_PRICE) &&
           VerifyField<int64_t>(verifier, VT_NEW_BID_VOLUME) &&
           VerifyField<double>(verifier, VT_NEW_BID_AMOUNT) &&
           VerifyField<int64_t>(verifier, VT_NEW_ASK_VOLUME) &&
           VerifyField<double>(verifier, VT_NEW_ASK_AMOUNT) &&
           VerifyField<int64_t>(verifier, VT_OPEN_INTEREST) &&
           VerifyField<double>(verifier, VT_PRE_SETTLE) &&
           VerifyField<int64_t>(verifier, VT_PRE_OPEN_INTEREST) &&
           VerifyField<double>(verifier, VT_CLOSE) &&
           VerifyField<double>(verifier, VT_SETTLE) &&
           VerifyField<int64_t>(verifier, VT_MULTIPLE) &&
           VerifyField<double>(verifier, VT_PRICE_STEP) &&
           VerifyField<int32_t>(verifier, VT_CREATE_DATE) &&
           VerifyField<int32_t>(verifier, VT_LIST_DATE) &&
           VerifyField<int32_t>(verifier, VT_EXPIRE_DATE) &&
           VerifyField<int32_t>(verifier, VT_START_SETTLE_DATE) &&
           VerifyField<int32_t>(verifier, VT_END_SETTLE_DATE) &&
           VerifyField<int32_t>(verifier, VT_EXERCISE_DATE) &&
           VerifyField<double>(verifier, VT_EXERCISE_PRICE) &&
           VerifyField<int8_t>(verifier, VT_CP_FLAG) &&
           VerifyOffset(verifier, VT_UNDERLYING_CODE) &&
           verifier.VerifyString(underlying_code()) &&
           VerifyField<int64_t>(verifier, VT_SUM_BID_VOLUME) &&
           VerifyField<double>(verifier, VT_SUM_BID_AMOUNT) &&
           VerifyField<int64_t>(verifier, VT_SUM_ASK_VOLUME) &&
           VerifyField<double>(verifier, VT_SUM_ASK_AMOUNT) &&
           VerifyField<int64_t>(verifier, VT_BID_ORDER_VOLUME) &&
           VerifyField<double>(verifier, VT_BID_ORDER_AMOUNT) &&
           VerifyField<int64_t>(verifier, VT_BID_CANCEL_VOLUME) &&
           VerifyField<double>(verifier, VT_BID_CANCEL_AMOUNT) &&
           VerifyField<int64_t>(verifier, VT_ASK_ORDER_VOLUME) &&
           VerifyField<double>(verifier, VT_ASK_ORDER_AMOUNT) &&
           VerifyField<int64_t>(verifier, VT_ASK_CANCEL_VOLUME) &&
           VerifyField<double>(verifier, VT_ASK_CANCEL_AMOUNT) &&
           VerifyField<int64_t>(verifier, VT_NEW_KNOCK_COUNT) &&
           VerifyField<int64_t>(verifier, VT_SUM_KNOCK_COUNT) &&
           verifier.EndTable();
  }
};

struct QTickBuilder {
  typedef QTick Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_src(int8_t src) {
    fbb_.AddElement<int8_t>(QTick::VT_SRC, src, 0);
  }
  void add_dtype(int8_t dtype) {
    fbb_.AddElement<int8_t>(QTick::VT_DTYPE, dtype, 0);
  }
  void add_timestamp(int64_t timestamp) {
    fbb_.AddElement<int64_t>(QTick::VT_TIMESTAMP, timestamp, 0);
  }
  void add_code(flatbuffers::Offset<flatbuffers::String> code) {
    fbb_.AddOffset(QTick::VT_CODE, code);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(QTick::VT_NAME, name);
  }
  void add_market(int8_t market) {
    fbb_.AddElement<int8_t>(QTick::VT_MARKET, market, 0);
  }
  void add_pre_close(double pre_close) {
    fbb_.AddElement<double>(QTick::VT_PRE_CLOSE, pre_close, 0.0);
  }
  void add_upper_limit(double upper_limit) {
    fbb_.AddElement<double>(QTick::VT_UPPER_LIMIT, upper_limit, 0.0);
  }
  void add_lower_limit(double lower_limit) {
    fbb_.AddElement<double>(QTick::VT_LOWER_LIMIT, lower_limit, 0.0);
  }
  void add_bp(flatbuffers::Offset<flatbuffers::Vector<double>> bp) {
    fbb_.AddOffset(QTick::VT_BP, bp);
  }
  void add_bv(flatbuffers::Offset<flatbuffers::Vector<int64_t>> bv) {
    fbb_.AddOffset(QTick::VT_BV, bv);
  }
  void add_ap(flatbuffers::Offset<flatbuffers::Vector<double>> ap) {
    fbb_.AddOffset(QTick::VT_AP, ap);
  }
  void add_av(flatbuffers::Offset<flatbuffers::Vector<int64_t>> av) {
    fbb_.AddOffset(QTick::VT_AV, av);
  }
  void add_status(int8_t status) {
    fbb_.AddElement<int8_t>(QTick::VT_STATUS, status, 0);
  }
  void add_new_price(double new_price) {
    fbb_.AddElement<double>(QTick::VT_NEW_PRICE, new_price, 0.0);
  }
  void add_new_volume(int64_t new_volume) {
    fbb_.AddElement<int64_t>(QTick::VT_NEW_VOLUME, new_volume, 0);
  }
  void add_new_amount(double new_amount) {
    fbb_.AddElement<double>(QTick::VT_NEW_AMOUNT, new_amount, 0.0);
  }
  void add_sum_volume(int64_t sum_volume) {
    fbb_.AddElement<int64_t>(QTick::VT_SUM_VOLUME, sum_volume, 0);
  }
  void add_sum_amount(double sum_amount) {
    fbb_.AddElement<double>(QTick::VT_SUM_AMOUNT, sum_amount, 0.0);
  }
  void add_open(double open) {
    fbb_.AddElement<double>(QTick::VT_OPEN, open, 0.0);
  }
  void add_high(double high) {
    fbb_.AddElement<double>(QTick::VT_HIGH, high, 0.0);
  }
  void add_low(double low) {
    fbb_.AddElement<double>(QTick::VT_LOW, low, 0.0);
  }
  void add_avg_bid_price(double avg_bid_price) {
    fbb_.AddElement<double>(QTick::VT_AVG_BID_PRICE, avg_bid_price, 0.0);
  }
  void add_avg_ask_price(double avg_ask_price) {
    fbb_.AddElement<double>(QTick::VT_AVG_ASK_PRICE, avg_ask_price, 0.0);
  }
  void add_new_bid_volume(int64_t new_bid_volume) {
    fbb_.AddElement<int64_t>(QTick::VT_NEW_BID_VOLUME, new_bid_volume, 0);
  }
  void add_new_bid_amount(double new_bid_amount) {
    fbb_.AddElement<double>(QTick::VT_NEW_BID_AMOUNT, new_bid_amount, 0.0);
  }
  void add_new_ask_volume(int64_t new_ask_volume) {
    fbb_.AddElement<int64_t>(QTick::VT_NEW_ASK_VOLUME, new_ask_volume, 0);
  }
  void add_new_ask_amount(double new_ask_amount) {
    fbb_.AddElement<double>(QTick::VT_NEW_ASK_AMOUNT, new_ask_amount, 0.0);
  }
  void add_open_interest(int64_t open_interest) {
    fbb_.AddElement<int64_t>(QTick::VT_OPEN_INTEREST, open_interest, 0);
  }
  void add_pre_settle(double pre_settle) {
    fbb_.AddElement<double>(QTick::VT_PRE_SETTLE, pre_settle, 0.0);
  }
  void add_pre_open_interest(int64_t pre_open_interest) {
    fbb_.AddElement<int64_t>(QTick::VT_PRE_OPEN_INTEREST, pre_open_interest, 0);
  }
  void add_close(double close) {
    fbb_.AddElement<double>(QTick::VT_CLOSE, close, 0.0);
  }
  void add_settle(double settle) {
    fbb_.AddElement<double>(QTick::VT_SETTLE, settle, 0.0);
  }
  void add_multiple(int64_t multiple) {
    fbb_.AddElement<int64_t>(QTick::VT_MULTIPLE, multiple, 0);
  }
  void add_price_step(double price_step) {
    fbb_.AddElement<double>(QTick::VT_PRICE_STEP, price_step, 0.0);
  }
  void add_create_date(int32_t create_date) {
    fbb_.AddElement<int32_t>(QTick::VT_CREATE_DATE, create_date, 0);
  }
  void add_list_date(int32_t list_date) {
    fbb_.AddElement<int32_t>(QTick::VT_LIST_DATE, list_date, 0);
  }
  void add_expire_date(int32_t expire_date) {
    fbb_.AddElement<int32_t>(QTick::VT_EXPIRE_DATE, expire_date, 0);
  }
  void add_start_settle_date(int32_t start_settle_date) {
    fbb_.AddElement<int32_t>(QTick::VT_START_SETTLE_DATE, start_settle_date, 0);
  }
  void add_end_settle_date(int32_t end_settle_date) {
    fbb_.AddElement<int32_t>(QTick::VT_END_SETTLE_DATE, end_settle_date, 0);
  }
  void add_exercise_date(int32_t exercise_date) {
    fbb_.AddElement<int32_t>(QTick::VT_EXERCISE_DATE, exercise_date, 0);
  }
  void add_exercise_price(double exercise_price) {
    fbb_.AddElement<double>(QTick::VT_EXERCISE_PRICE, exercise_price, 0.0);
  }
  void add_cp_flag(int8_t cp_flag) {
    fbb_.AddElement<int8_t>(QTick::VT_CP_FLAG, cp_flag, 0);
  }
  void add_underlying_code(flatbuffers::Offset<flatbuffers::String> underlying_code) {
    fbb_.AddOffset(QTick::VT_UNDERLYING_CODE, underlying_code);
  }
  void add_sum_bid_volume(int64_t sum_bid_volume) {
    fbb_.AddElement<int64_t>(QTick::VT_SUM_BID_VOLUME, sum_bid_volume, 0);
  }
  void add_sum_bid_amount(double sum_bid_amount) {
    fbb_.AddElement<double>(QTick::VT_SUM_BID_AMOUNT, sum_bid_amount, 0.0);
  }
  void add_sum_ask_volume(int64_t sum_ask_volume) {
    fbb_.AddElement<int64_t>(QTick::VT_SUM_ASK_VOLUME, sum_ask_volume, 0);
  }
  void add_sum_ask_amount(double sum_ask_amount) {
    fbb_.AddElement<double>(QTick::VT_SUM_ASK_AMOUNT, sum_ask_amount, 0.0);
  }
  void add_bid_order_volume(int64_t bid_order_volume) {
    fbb_.AddElement<int64_t>(QTick::VT_BID_ORDER_VOLUME, bid_order_volume, 0);
  }
  void add_bid_order_amount(double bid_order_amount) {
    fbb_.AddElement<double>(QTick::VT_BID_ORDER_AMOUNT, bid_order_amount, 0.0);
  }
  void add_bid_cancel_volume(int64_t bid_cancel_volume) {
    fbb_.AddElement<int64_t>(QTick::VT_BID_CANCEL_VOLUME, bid_cancel_volume, 0);
  }
  void add_bid_cancel_amount(double bid_cancel_amount) {
    fbb_.AddElement<double>(QTick::VT_BID_CANCEL_AMOUNT, bid_cancel_amount, 0.0);
  }
  void add_ask_order_volume(int64_t ask_order_volume) {
    fbb_.AddElement<int64_t>(QTick::VT_ASK_ORDER_VOLUME, ask_order_volume, 0);
  }
  void add_ask_order_amount(double ask_order_amount) {
    fbb_.AddElement<double>(QTick::VT_ASK_ORDER_AMOUNT, ask_order_amount, 0.0);
  }
  void add_ask_cancel_volume(int64_t ask_cancel_volume) {
    fbb_.AddElement<int64_t>(QTick::VT_ASK_CANCEL_VOLUME, ask_cancel_volume, 0);
  }
  void add_ask_cancel_amount(double ask_cancel_amount) {
    fbb_.AddElement<double>(QTick::VT_ASK_CANCEL_AMOUNT, ask_cancel_amount, 0.0);
  }
  void add_new_knock_count(int64_t new_knock_count) {
    fbb_.AddElement<int64_t>(QTick::VT_NEW_KNOCK_COUNT, new_knock_count, 0);
  }
  void add_sum_knock_count(int64_t sum_knock_count) {
    fbb_.AddElement<int64_t>(QTick::VT_SUM_KNOCK_COUNT, sum_knock_count, 0);
  }
  explicit QTickBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<QTick> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<QTick>(end);
    return o;
  }
};

inline flatbuffers::Offset<QTick> CreateQTick(
    flatbuffers::FlatBufferBuilder &_fbb,
    int8_t src = 0,
    int8_t dtype = 0,
    int64_t timestamp = 0,
    flatbuffers::Offset<flatbuffers::String> code = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int8_t market = 0,
    double pre_close = 0.0,
    double upper_limit = 0.0,
    double lower_limit = 0.0,
    flatbuffers::Offset<flatbuffers::Vector<double>> bp = 0,
    flatbuffers::Offset<flatbuffers::Vector<int64_t>> bv = 0,
    flatbuffers::Offset<flatbuffers::Vector<double>> ap = 0,
    flatbuffers::Offset<flatbuffers::Vector<int64_t>> av = 0,
    int8_t status = 0,
    double new_price = 0.0,
    int64_t new_volume = 0,
    double new_amount = 0.0,
    int64_t sum_volume = 0,
    double sum_amount = 0.0,
    double open = 0.0,
    double high = 0.0,
    double low = 0.0,
    double avg_bid_price = 0.0,
    double avg_ask_price = 0.0,
    int64_t new_bid_volume = 0,
    double new_bid_amount = 0.0,
    int64_t new_ask_volume = 0,
    double new_ask_amount = 0.0,
    int64_t open_interest = 0,
    double pre_settle = 0.0,
    int64_t pre_open_interest = 0,
    double close = 0.0,
    double settle = 0.0,
    int64_t multiple = 0,
    double price_step = 0.0,
    int32_t create_date = 0,
    int32_t list_date = 0,
    int32_t expire_date = 0,
    int32_t start_settle_date = 0,
    int32_t end_settle_date = 0,
    int32_t exercise_date = 0,
    double exercise_price = 0.0,
    int8_t cp_flag = 0,
    flatbuffers::Offset<flatbuffers::String> underlying_code = 0,
    int64_t sum_bid_volume = 0,
    double sum_bid_amount = 0.0,
    int64_t sum_ask_volume = 0,
    double sum_ask_amount = 0.0,
    int64_t bid_order_volume = 0,
    double bid_order_amount = 0.0,
    int64_t bid_cancel_volume = 0,
    double bid_cancel_amount = 0.0,
    int64_t ask_order_volume = 0,
    double ask_order_amount = 0.0,
    int64_t ask_cancel_volume = 0,
    double ask_cancel_amount = 0.0,
    int64_t new_knock_count = 0,
    int64_t sum_knock_count = 0) {
  QTickBuilder builder_(_fbb);
  builder_.add_sum_knock_count(sum_knock_count);
  builder_.add_new_knock_count(new_knock_count);
  builder_.add_ask_cancel_amount(ask_cancel_amount);
  builder_.add_ask_cancel_volume(ask_cancel_volume);
  builder_.add_ask_order_amount(ask_order_amount);
  builder_.add_ask_order_volume(ask_order_volume);
  builder_.add_bid_cancel_amount(bid_cancel_amount);
  builder_.add_bid_cancel_volume(bid_cancel_volume);
  builder_.add_bid_order_amount(bid_order_amount);
  builder_.add_bid_order_volume(bid_order_volume);
  builder_.add_sum_ask_amount(sum_ask_amount);
  builder_.add_sum_ask_volume(sum_ask_volume);
  builder_.add_sum_bid_amount(sum_bid_amount);
  builder_.add_sum_bid_volume(sum_bid_volume);
  builder_.add_exercise_price(exercise_price);
  builder_.add_price_step(price_step);
  builder_.add_multiple(multiple);
  builder_.add_settle(settle);
  builder_.add_close(close);
  builder_.add_pre_open_interest(pre_open_interest);
  builder_.add_pre_settle(pre_settle);
  builder_.add_open_interest(open_interest);
  builder_.add_new_ask_amount(new_ask_amount);
  builder_.add_new_ask_volume(new_ask_volume);
  builder_.add_new_bid_amount(new_bid_amount);
  builder_.add_new_bid_volume(new_bid_volume);
  builder_.add_avg_ask_price(avg_ask_price);
  builder_.add_avg_bid_price(avg_bid_price);
  builder_.add_low(low);
  builder_.add_high(high);
  builder_.add_open(open);
  builder_.add_sum_amount(sum_amount);
  builder_.add_sum_volume(sum_volume);
  builder_.add_new_amount(new_amount);
  builder_.add_new_volume(new_volume);
  builder_.add_new_price(new_price);
  builder_.add_lower_limit(lower_limit);
  builder_.add_upper_limit(upper_limit);
  builder_.add_pre_close(pre_close);
  builder_.add_timestamp(timestamp);
  builder_.add_underlying_code(underlying_code);
  builder_.add_exercise_date(exercise_date);
  builder_.add_end_settle_date(end_settle_date);
  builder_.add_start_settle_date(start_settle_date);
  builder_.add_expire_date(expire_date);
  builder_.add_list_date(list_date);
  builder_.add_create_date(create_date);
  builder_.add_av(av);
  builder_.add_ap(ap);
  builder_.add_bv(bv);
  builder_.add_bp(bp);
  builder_.add_name(name);
  builder_.add_code(code);
  builder_.add_cp_flag(cp_flag);
  builder_.add_status(status);
  builder_.add_market(market);
  builder_.add_dtype(dtype);
  builder_.add_src(src);
  return builder_.Finish();
}

inline flatbuffers::Offset<QTick> CreateQTickDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int8_t src = 0,
    int8_t dtype = 0,
    int64_t timestamp = 0,
    const char *code = nullptr,
    const char *name = nullptr,
    int8_t market = 0,
    double pre_close = 0.0,
    double upper_limit = 0.0,
    double lower_limit = 0.0,
    const std::vector<double> *bp = nullptr,
    const std::vector<int64_t> *bv = nullptr,
    const std::vector<double> *ap = nullptr,
    const std::vector<int64_t> *av = nullptr,
    int8_t status = 0,
    double new_price = 0.0,
    int64_t new_volume = 0,
    double new_amount = 0.0,
    int64_t sum_volume = 0,
    double sum_amount = 0.0,
    double open = 0.0,
    double high = 0.0,
    double low = 0.0,
    double avg_bid_price = 0.0,
    double avg_ask_price = 0.0,
    int64_t new_bid_volume = 0,
    double new_bid_amount = 0.0,
    int64_t new_ask_volume = 0,
    double new_ask_amount = 0.0,
    int64_t open_interest = 0,
    double pre_settle = 0.0,
    int64_t pre_open_interest = 0,
    double close = 0.0,
    double settle = 0.0,
    int64_t multiple = 0,
    double price_step = 0.0,
    int32_t create_date = 0,
    int32_t list_date = 0,
    int32_t expire_date = 0,
    int32_t start_settle_date = 0,
    int32_t end_settle_date = 0,
    int32_t exercise_date = 0,
    double exercise_price = 0.0,
    int8_t cp_flag = 0,
    const char *underlying_code = nullptr,
    int64_t sum_bid_volume = 0,
    double sum_bid_amount = 0.0,
    int64_t sum_ask_volume = 0,
    double sum_ask_amount = 0.0,
    int64_t bid_order_volume = 0,
    double bid_order_amount = 0.0,
    int64_t bid_cancel_volume = 0,
    double bid_cancel_amount = 0.0,
    int64_t ask_order_volume = 0,
    double ask_order_amount = 0.0,
    int64_t ask_cancel_volume = 0,
    double ask_cancel_amount = 0.0,
    int64_t new_knock_count = 0,
    int64_t sum_knock_count = 0) {
  auto code__ = code ? _fbb.CreateString(code) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto bp__ = bp ? _fbb.CreateVector<double>(*bp) : 0;
  auto bv__ = bv ? _fbb.CreateVector<int64_t>(*bv) : 0;
  auto ap__ = ap ? _fbb.CreateVector<double>(*ap) : 0;
  auto av__ = av ? _fbb.CreateVector<int64_t>(*av) : 0;
  auto underlying_code__ = underlying_code ? _fbb.CreateString(underlying_code) : 0;
  return CreateQTick(
      _fbb,
      src,
      dtype,
      timestamp,
      code__,
      name__,
      market,
      pre_close,
      upper_limit,
      lower_limit,
      bp__,
      bv__,
      ap__,
      av__,
      status,
      new_price,
      new_volume,
      new_amount,
      sum_volume,
      sum_amount,
      open,
      high,
      low,
      avg_bid_price,
      avg_ask_price,
      new_bid_volume,
      new_bid_amount,
      new_ask_volume,
      new_ask_amount,
      open_interest,
      pre_settle,
      pre_open_interest,
      close,
      settle,
      multiple,
      price_step,
      create_date,
      list_date,
      expire_date,
      start_settle_date,
      end_settle_date,
      exercise_date,
      exercise_price,
      cp_flag,
      underlying_code__,
      sum_bid_volume,
      sum_bid_amount,
      sum_ask_volume,
      sum_ask_amount,
      bid_order_volume,
      bid_order_amount,
      bid_cancel_volume,
      bid_cancel_amount,
      ask_order_volume,
      ask_order_amount,
      ask_cancel_volume,
      ask_cancel_amount,
      new_knock_count,
      sum_knock_count);
}

inline const QTick *GetQTick(const void *buf) {
  return flatbuffers::GetRoot<QTick>(buf);
}

inline const QTick *GetSizePrefixedQTick(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<QTick>(buf);
}

inline bool VerifyQTickBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<QTick>(nullptr);
}

inline bool VerifySizePrefixedQTickBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<QTick>(nullptr);
}

inline void FinishQTickBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<QTick> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedQTickBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<QTick> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_QTICK_H_
